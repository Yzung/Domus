generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

//
// -------- ENUMS --------
//

enum TipoUso {
  CONTINUO
  DESCARTAVEL
}

enum TipoTransacao {
  RECORRENTE
  VARIAVEL
}

//
// -------- MODELS --------
//

// ---------------------------
// Usuário do sistema
// ---------------------------
model User {
  userId     BigInt @id @default(autoincrement()) // ID principal
  nome       String
  hashSenha  String                              // Senha criptografada
  criadoEm   DateTime @default(now())            // Timestamp de criação

  // Relacionamentos
  emails      Email[]
  telefones   Telefone[]
  endPessoais EPessoal[]
  endComerciais EComercial[]
  entradas    Entrada[]
  saidas      Saida[]
  receitas    Receita[]
  compras     Compra[]
  estoques    Estoque[]
}

// ---------------------------
// Categoria de produto
// ---------------------------
model Categoria {
  categoriaId Int    @id @default(autoincrement())
  nome        String
  descricao   String?

  produtos Produto[]
}

// ---------------------------
// Lote de produtos (validade, nome identificador)
// ---------------------------
model Lote {
  loteId       Int      @id @default(autoincrement())
  nome         String
  validade     DateTime  // Alterado para DateTime
  quantidade   Int

  produtos Produto[]
}

// ---------------------------
// Produto geral (item comprado ou gerenciado)
// ---------------------------
model Produto {
  produtoId     Int       @id @default(autoincrement())
  nome          String
  descricao     String?   
  valor         BigInt
  criadoEm      DateTime
  uso           TipoUso
  fotoUrl       String?   // URL da foto do produto
  dataCompra    DateTime?

  categoriaId   Int
  loteId        Int

  categoria Categoria @relation(fields: [categoriaId], references: [categoriaId])
  lote      Lote      @relation(fields: [loteId], references: [loteId])

  estoques Estoque[]
  compras  Compra[]
}

// ---------------------------
// Lista de compras
// ---------------------------
model Lista {
  listaId       Int      @id @default(autoincrement())
  nome          String
  descricao     String?  
  valorTotal    BigInt
  finalizada    Boolean
  dataCriada    DateTime @default(now())

  compras Compra[]
}

// ---------------------------
// Compra: ligação entre lista, produto e usuário
// ---------------------------
model Compra {
  listaId   Int
  produtoId Int
  userId    BigInt
  dataCompra DateTime @default(now()) // Data da compra aqui

  lista   Lista   @relation(fields: [listaId], references: [listaId])
  produto Produto @relation(fields: [produtoId], references: [produtoId])
  user    User    @relation(fields: [userId], references: [userId])

  @@id([listaId, produtoId, userId])
}

// ---------------------------
// Estoque do usuário
// ---------------------------
model Estoque {
  estoqueId  Int    @id @default(autoincrement())
  userId     BigInt
  produtoId  Int
  quantidade Int    // Quantidade disponível do produto

  produto Produto @relation(fields: [produtoId], references: [produtoId])
  user    User    @relation(fields: [userId], references: [userId])

  @@index([userId])
}

// ---------------------------
// Email do usuário
// ---------------------------
model Email {
  emailId Int    @id @default(autoincrement())
  email   String
  userId  BigInt

  user User @relation(fields: [userId], references: [userId])

  @@unique([email, userId])
}

// ---------------------------
// Telefone do usuário
// ---------------------------
model Telefone {
  telefoneId Int    @id @default(autoincrement())
  numero     String
  ddd        Int
  userId     BigInt

  user User @relation(fields: [userId], references: [userId])

  @@unique([numero, userId])
}

// ---------------------------
// Endereço pessoal
// ---------------------------
model EPessoal {
  epId     Int    @id @default(autoincrement())
  rua      String
  numero   String
  bairro   String
  cidade   String
  userId   BigInt

  user User @relation(fields: [userId], references: [userId])

  @@unique([rua, numero, bairro, cidade, userId])
}

// ---------------------------
// Endereço comercial
// ---------------------------
model EComercial {
  ecId    BigInt @id @default(autoincrement())
  rua     String
  numero  BigInt
  bairro  String
  cidade  String
  userId  BigInt

  user User @relation(fields: [userId], references: [userId])

  @@unique([rua, numero, bairro, cidade, userId])
}

// ---------------------------
// Entradas financeiras ou materiais
// ---------------------------
model Entrada {
  entradaId Int      @id @default(autoincrement())
  nome      String
  tipo      TipoTransacao
  data      DateTime
  userId    BigInt

  user User @relation(fields: [userId], references: [userId])

  @@unique([nome, userId])
}

// ---------------------------
// Saídas financeiras
// ---------------------------
model Saida {
  saidaId Int      @id @default(autoincrement())
  nome    String
  tipo    TipoTransacao
  data    DateTime
  userId  BigInt

  user User @relation(fields: [userId], references: [userId])

  @@unique([nome, userId])
}

// ---------------------------
// Receitas culinárias
// ---------------------------
model Receita {
  receitaId     Int      @id @default(autoincrement())
  nome          String   @unique
  dataTentativa DateTime
  nota          String?
  userId        BigInt

  user User @relation(fields: [userId], references: [userId])
}
