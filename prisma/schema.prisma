// ========================
// CONFIGURAÇÃO PRISMA
// ========================
generator erd {
  provider = "prisma-erd-generator"
  output   = "./erd.pdf"
  theme    = "forest"
}

generator client {
  provider = "prisma-client-js" 
}

datasource db {
  provider = "mongodb"           // Banco MongoDB
  url      = env("DATABASE_URL") // Usa variável de ambiente para a URL do banco
}

// ========================
// ENUMS
// ========================
enum TipoUso {
  CONTINUO    
  DESCARTAVEL 
}

enum TipoTransacao {
  RECORRENTE 
  VARIAVEL   
}

// ========================
// MODELS
// ========================

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  nome        String
  sobrenome   String
  hashSenha   String
  criadoEm    DateTime @default(now())

  // Relacionamentos
  emails        Email[]
  telefones     Telefone[]
  endPessoais   EPessoal[]
  endComerciais EComercial[]
  entradas      Entrada[]
  saidas        Saida[]
  contas        Conta[]
  receitas      Receita[]
  compras       Compra[]
  estoques      Estoque[]
}

model Email {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  email    String
  userId   String @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  @@unique([email, userId])
}

model Telefone {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  numero   String
  ddd      Int
  userId   String @db.ObjectId

  user User @relation(fields: [userId], references: [id])

  @@unique([numero, userId])
}

model Localidade {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  cidade      String
  bairro      String

  enderecosPessoais   EPessoal[]
  enderecosComerciais EComercial[]
}

model EPessoal {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rua         String
  numero      String
  userId      String   @db.ObjectId
  localidadeId String  @db.ObjectId

  user       User       @relation(fields: [userId], references: [id])
  localidade Localidade @relation(fields: [localidadeId], references: [id])

  @@unique([rua, numero, localidadeId, userId])
}

model EComercial {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rua         String
  numero      String
  userId      String   @db.ObjectId
  localidadeId String  @db.ObjectId

  user       User       @relation(fields: [userId], references: [id])
  localidade Localidade @relation(fields: [localidadeId], references: [id])

  @@unique([rua, numero, localidadeId, userId])
}

model Conta {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  nome     String
  banco    String
  saldo    Int     @default(0)
  userId   String  @db.ObjectId

  user     User     @relation(fields: [userId], references: [id])
  entradas Entrada[]
  saidas   Saida[]

  @@index([userId])
}

model Entrada {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  nome      String
  tipo      TipoTransacao
  data      DateTime
  valor     Int
  userId    String  @db.ObjectId
  contaId   String  @db.ObjectId

  user  User  @relation(fields: [userId], references: [id])
  conta Conta @relation(fields: [contaId], references: [id])

  @@unique([nome, userId])
}

model Saida {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  nome      String
  tipo      TipoTransacao
  data      DateTime
  valor     Int
  userId    String  @db.ObjectId
  contaId   String  @db.ObjectId

  user  User  @relation(fields: [userId], references: [id])
  conta Conta @relation(fields: [contaId], references: [id])

  @@unique([nome, userId])
}

model Receita {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  nome         String   @unique
  dataTentativa DateTime
  nota         String?
  userId       String   @db.ObjectId

  user User @relation(fields: [userId], references: [id])
}

model Unidade {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  nome      String
  sigla     String

  produtos Produto[]
  estoques Estoque[]
  compras  Compra[]
}

model Categoria {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  nome        String
  descricao   String?

  produtos Produto[]
}

model Lote {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  nome        String
  validade    DateTime
  quantidade  Int

  produtos Produto[]
}

model Produto {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  nome        String
  descricao   String?
  valor       Int
  criadoEm    DateTime
  uso         TipoUso
  fotoUrl     String?
  dataCompra  DateTime?

  categoriaId String   @db.ObjectId
  loteId      String   @db.ObjectId
  unidadeId   String   @db.ObjectId

  categoria Categoria @relation(fields: [categoriaId], references: [id])
  lote      Lote      @relation(fields: [loteId], references: [id])
  unidade   Unidade   @relation(fields: [unidadeId], references: [id])

  estoques Estoque[]
  compras  Compra[]
}

model Estoque {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  produtoId  String   @db.ObjectId
  unidadeId  String   @db.ObjectId
  quantidade Int

  produto Produto @relation(fields: [produtoId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  unidade Unidade @relation(fields: [unidadeId], references: [id])

  @@index([userId])
}

model Lista {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  nome       String
  descricao  String?
  valorTotal Int
  finalizada Boolean
  dataCriada DateTime @default(now())

  compras Compra[]
}

model Compra {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  listaId    String   @db.ObjectId
  produtoId  String   @db.ObjectId
  userId     String   @db.ObjectId
  unidadeId  String   @db.ObjectId
  quantidade Int
  dataCompra DateTime @default(now())

  lista   Lista   @relation(fields: [listaId], references: [id])
  produto Produto @relation(fields: [produtoId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
  unidade Unidade @relation(fields: [unidadeId], references: [id])

  @@unique([listaId, produtoId, userId])
}
